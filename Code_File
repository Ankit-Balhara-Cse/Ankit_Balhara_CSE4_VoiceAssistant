import sys
import os
import time
import pyautogui
import psutil
import speech_recognition as sr
import pyttsx3
import wikipedia
import wolframalpha
import webbrowser
import threading
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QTextEdit
from PyQt5.QtCore import Qt

engine = pyttsx3.init()
WOLFRAM_APP_ID = "P362H3-H6GATVPLVT"
client = wolframalpha.Client(WOLFRAM_APP_ID)

def speak(text):
    engine.say(text)
    engine.runAndWait()

def listen(timeout=6):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        try:
            audio = recognizer.listen(source, timeout=timeout)
            command = recognizer.recognize_google(audio).lower()
            print(f"You said: {command}")
            return command
        except sr.UnknownValueError:
            return ""
        except sr.RequestError:
            return ""

def is_process_running(process_name):
    for process in psutil.process_iter():
        try:
            if process_name.lower() in process.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False

def send_whatsapp_message(command):
    try:
        if "do message to" in command:
            words = command.replace("do message to ", "", 1)
            parts = words.split(" ")

            for i in range(1, len(parts)):
                if parts[i].lower() in ["hello", "hi", "hey", "how", "are", "you", "good", "morning"]:
                    recipient = " ".join(parts[:i])
                    message = " ".join(parts[i:])
                    break

            speak(f"Sending WhatsApp message to {recipient}: {message}")

            contacts = {
                "me": "Me",
                "utsav singhal": "Utsav Singhal",
                "shivam balhara": "Shivam Balhara",
                "mukul": "Mukul",
                "krish": "Krish",
                "monty": "Monty"
            }

            if recipient in contacts:
                contact_name = contacts[recipient]

                if not is_process_running("WhatsApp.exe"):
                    os.startfile(r"C:\\Users\\balha\\OneDrive\\Desktop\\WhatsApp.lnk")
                    time.sleep(5)

                pyautogui.click(250, 150)
                time.sleep(1)
                pyautogui.write(contact_name)
                time.sleep(2)
                pyautogui.press("down")
                time.sleep(1)
                pyautogui.press("enter")
                time.sleep(3)
                pyautogui.click(400, 700)
                time.sleep(1)
                pyautogui.write(message)
                time.sleep(1)
                pyautogui.press("enter")
                speak("Message sent successfully")
            else:
                speak("I don't have a contact for that name.")
        else:
            speak("Could not understand the message command.")
    except Exception as e:
        speak("There was an error sending the message.")
        print(e)

def ask_wolfram_alpha(query):
    try:
        res = client.query(query)
        answer = next(res.results).text
        return answer
    except:
        return None

def search_wikipedia(command):
    try:
        speak("Searching...")
        answer = ask_wolfram_alpha(command)
        if answer:
            speak(answer)
            print(answer)
            return
        result = wikipedia.summary(command, sentences=2)
        speak(result)
        print(result)
    except wikipedia.exceptions.DisambiguationError:
        speak("There are multiple results. Please be more specific.")
    except wikipedia.exceptions.PageError:
        speak("Sorry, I couldn't find anything on Wikipedia.")
    except Exception as e:
        speak("There was an error while searching.")
        print(e)

def open_application(command):
    if "open youtube" in command:
        speak("Opening YouTube")
        webbrowser.open("https://www.youtube.com")
    elif "open whatsapp" in command:
        speak("Opening WhatsApp")
        os.startfile(r"C:\\Users\\balha\\OneDrive\\Desktop\\WhatsApp.lnk")
    elif "open chat gpt" in command:
        speak("Opening ChatGPT")
        webbrowser.open("https://chat.openai.com/")
    else:
        speak("Application not recognized")

def close_application(command):
    processes = {
        "close whatsapp": "WhatsApp.exe",
        "close chrome": "chrome.exe",
        "close notepad": "notepad.exe",
        "close edge": "msedge.exe"
    }
    for key, process in processes.items():
        if key in command:
            speak(f"Closing {key.replace('close ', '').capitalize()}")
            os.system(f"taskkill /F /IM {process} 2>nul")
            return
    speak("Application not found")

def play_song(command):
    try:
        song_name = command.replace("play", "").strip()
        speak(f"Searching for {song_name} on YouTube Music")

        url = f"https://music.youtube.com/search?q={song_name}"
        webbrowser.open(url)

        time.sleep(10)
        pyautogui.moveTo(860, 462)
        pyautogui.click()

        speak(f"Now playing {song_name}")
    except Exception as e:
        speak("Something went wrong while playing the song.")
        print("Error:", e)

def pause_song():
    try:
        pyautogui.press("k")
        speak("Music paused or resumed")
    except:
        speak("Couldn't pause the music.")

class VoiceAssistantGUI(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Lizza - Your Voice Assistant")
        self.setGeometry(400, 200, 400, 300)

        layout = QVBoxLayout()

        self.status_label = QLabel("Status: Idle")
        self.status_label.setAlignment(Qt.AlignCenter)

        self.listen_button = QPushButton("Start Listening")
        self.listen_button.clicked.connect(self.start_listening)

        self.stop_button = QPushButton("Stop Listening")
        self.stop_button.clicked.connect(self.stop_listening)
        self.stop_button.setEnabled(False)

        self.output_text = QTextEdit()
        self.output_text.setReadOnly(True)

        layout.addWidget(self.status_label)
        layout.addWidget(self.listen_button)
        layout.addWidget(self.stop_button)
        layout.addWidget(self.output_text)

        self.setLayout(layout)

        self.listening = False

    def start_listening(self):
        self.listening = True
        self.status_label.setText("Status: Listening...")
        self.listen_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        threading.Thread(target=self.run_assistant).start()

    def stop_listening(self):
        self.listening = False
        self.status_label.setText("Status: Stopped")
        self.listen_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def run_assistant(self):
        speak("Say 'Lizza' to activate me!")
        while self.listening:
            wake_word = listen()
            if "liza" in wake_word:
                self.update_output("Heard wake word: " + wake_word)
                speak("Yes, I'm listening!")
                command = listen()
                self.update_output("Command: " + command)

                if "open" in command:
                    open_application(command)
                elif "close" in command:
                    close_application(command)
                elif "do message to" in command:
                    send_whatsapp_message(command)
                elif "play" in command:
                    play_song(command)
                elif "pause" in command or "resume" in command:
                    pause_song()
                elif "co-ordinate" in command:
                    print(pyautogui.position())
                else:
                    search_wikipedia(command)

            if "stop" in wake_word:
                self.update_output("Heard stop command. Exiting...")
                self.stop_listening()
                speak("Goodbye!")
                break

    def update_output(self, text):
        self.output_text.append(text)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VoiceAssistantGUI()
    window.show()
    sys.exit(app.exec_())
